Plugin.metaClass.isAndroidApp = {-> delegate.class.getCanonicalName() == "com.android.build.gradle.AppPlugin" }
Plugin.metaClass.isDynamicFeature = {-> delegate.class.getCanonicalName() == "com.android.build.gradle.DynamicFeaturePlugin" }
Plugin.metaClass.isAndroidLibrary = {-> delegate.class.getCanonicalName() == "com.android.build.gradle.LibraryPlugin" }

buildscript {
    apply from: 'versions.gradle'
    ext {
        kotlin_version = '1.3.72'
    }
    repositories {
        google()
        mavenCentral()

        maven { url "https://www.jitpack.io" }
    }

    dependencies {
        classpath 'com.google.gms:google-services:4.3.10'
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath deps.kotlin.plugin
        classpath deps.dagger.hilt_plugin
        classpath deps.navigation.safe_args_plugin
        classpath deps.firebase.perf_plugin  // Performance Monitoring plugin
        classpath deps.firebase.crashlytics_plugin
        classpath 'com.google.android.gms:oss-licenses-plugin:0.10.4'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()

        maven { url "https://jitpack.io" }
        maven { url 'https://maven.google.com/' }
        maven { url 'https://devrepo.kakao.com/nexus/content/groups/public/' }
    }

    plugins.whenPluginAdded {
        if (it.isAndroidApp() || it.isAndroidLibrary() || it.isDynamicFeature()) {
            android {
                compileSdkVersion build_versions.compile_sdk
                buildToolsVersion build_versions.build_tools

                defaultConfig {

                    minSdkVersion build_versions.min_sdk
                    targetSdkVersion build_versions.target_sdk
                    versionCode build_versions.version_code
                    versionName build_versions.version_name

//                    buildConfigField("String", "apiEndPoint", "\"https://api.moc.app/\"")

                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                    multiDexEnabled true
                }

                buildFeatures {
                    dataBinding true
                    viewBinding true
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
            }
        }

    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
